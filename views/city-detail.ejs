<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title><%= city.name %> - <%= region.name %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link rel="icon" type="image/png" sizes="32x32" href="../images/icon.png">
    <style>
        /* Grid of destinations */
        .grid-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }

        .grid-item {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 10px;
            width: 300px;
            text-align: center;
        }

        .grid-item img {
            width: 100%;
            border-radius: 8px;
        }

        .discover-btn {
            margin-top: 5px;
            padding: 5px 10px;
            cursor: pointer;
            background-color: hsl(214, 72%, 33%);
            color: white;
            border: none;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .discover-btn:hover {
            background-color: hsl(214, 72%, 28%);
        }

        /* Destination detail section */
        #destinationDetailsSection {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease;
            margin-top: 20px;
        }

        #destinationDetailsSection.show {
            display: block;
            opacity: 1;
        }

        #backBtn {
            padding: 5px 10px;
            cursor: pointer;
            background-color: hsl(214, 72%, 33%);
            color: white;
            border: none;
            border-radius: 5px;
            transition: background 0.3s;
        }

        #backBtn:hover {
            background-color: hsl(214, 72%, 28%);
        }

        /* Sort + Back container */
        .controls {
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
            gap: 20px;
            align-items: center;
        }

        /* Detail images grid */
.detail-img-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 8px; /* spacing between images */
    margin: 0 20px; /* top/bottom 0, left/right 10px */
    justify-content: center;
    /*background-color: hsl(217, 100%, 97%);*/
    padding:10px;
}

.detail-img-item.big {
    flex: 2 2 50%; /* smaller than before */
    margin-left: 4px;
    margin-right: 4px;
}

.detail-img-item.small {
    flex: 1 1 22%; /* slightly bigger to balance with big image */
    margin-left: 4px;
    margin-right: 4px;
}

.detail-img-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 5px;
}
        /* Responsive */
        @media (max-width: 768px) {
            .grid-item {
                width: 100%;
            }

            .controls {
                flex-direction: column;
            }

            .detail-img-item.big {
                flex: 2 2 100%;
            }

            .detail-img-item.small {
                flex: 1 1 45%;
            }
        }
    </style>
</head>

<body>
    <% include nav.ejs %>

    <div class="video-container">
        <img src="<%= city.image_url?.[0] || '/images/default-region.jpg' %>" alt="<%= region.name %>"
            style="width:100%;height: 650px; margin-bottom:20px;">
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 650px; background: rgba(0, 0, 0, 0.35); z-index: 1;"></div>
        <div class="hero-content">
            <h1><%= city.name %></h1>
        </div>
    </div>

    <div class="main-content">
        <h3 style="display: flex;justify-content: center;text-transform: uppercase;"><%= region.name %></h3>
        <h2 style="text-align:center; color:hsl(214,72%,33%,0.95);"><%= city.description %></h2>

        <!-- Sort + Back Controls -->
<div class="controls">
    <label for="typeSort">Sort by Type:</label>
    <select id="typeSort">
        <option value="all">All</option>
        <option value="eco">Eco</option>
        <option value="worship">Worship</option>
        <option value="entertainment">Entertainment</option>
    </select>
    <button id="backBtn" style="display:none;">Back</button>
</div>

        <% if (destinations.length) { %>
            <div id="gridWrapper">
                <div class="grid-container" id="destinationsGrid">
                    <% destinations.forEach(d => { %>
                        <div class="grid-item" data-id="<%= d.id %>" data-type="<%= d.type %>">
                            <strong><%= d.name %></strong>
                            <% if (d.images && d.images.length) { %>
                                <img src="<%= d.images[0] %>" alt="<%= d.name %>">
                            <% } %>
                            <button class="discover-btn" data-id="<%= d.id %>">Discover</button>
                        </div>
                    <% }) %>
                </div>
            </div>

            <div id="destinationDetailsSection"></div>
        <% } else { %>
            <p>No destinations found for this city.</p>
        <% } %>
    </div>

    <script>
        const destinations = <%- JSON.stringify(destinations) %>;
        const gridWrapper = document.getElementById('gridWrapper');
        const grid = document.getElementById('destinationsGrid');
        const detailsSection = document.getElementById('destinationDetailsSection');
        const nameSort = document.getElementById('nameSort');
        const backBtn = document.getElementById('backBtn');

        // Show destination details
        function showDetails(destination) {
            let html = `<div class="header-destination colored">`;
            html += `<h2>${destination.name}</h2>`;
            html += '<p><strong>Destination Details:</strong></p>';
            html += `<p>${destination.description}</p>`;
            html += `</div>`;
            // Images grid in big-small pattern
            if (destination.images && destination.images.length) {

                html += `<div class="detail-img-grid">`;
                destination.images.forEach((img, idx) => {
                    const cls = (idx % 5 === 0) ? 'big' : 'small';
                    html += `<div class="detail-img-item ${cls}"><img src="${img}" alt="${destination.name}"></div>`;
                });
                html += `</div>`;
            }

            // Highlights
           if (destination.highlights.length) {
    html += '<div class="highlight">';
    html += `<h2>Highlights:</h2><ul>`;
    destination.highlights.forEach(h => {
        html += `<li><strong class ="text">${h.activitiesname}</strong> 
            <p> ${h.description}<p>`;
        if (h.img && h.img.length) {
            html += `<div class="detail-img-grid">`;
            h.img.forEach((i, idx) => {
                // pattern: 2 small, 1 big, 2 small
                let cls = 'small'; // default
                const patternIdx = idx % 5;
                if (patternIdx === 2) cls = 'big'; // every 3rd image is big
                html += `<div class="detail-img-item ${cls}"><img src="${i}" alt="${h.activitiesname}"></div>`;
            });
            html += `</div>`;
        }
        html += `</li>`;
    });
    html += `</ul>`;
    html += '</div>';
}

            if (destination.transports) {
                html += '<div class="header-destination">';
                html +='<h2 style="color: indianred;" >How to get there:</h2>';
                html += `<p>${destination.transports}</p>`;
                html += '</div>';
            }

if (destination.experiences.length) {
    html += '<div class="experience">';
    html += `<h2 style="cursor:pointer;" onclick="toggleExperience(this)">Reviews: ⭐</h2>`; // clickable header

    html += `<ul class="experience-list" style="display:none;">`; // initially hidden

    destination.experiences.forEach(e => {
        html += `<li><strong>${e.nameofreviewer}</strong> : ${e.rate} ⭐`;
        html += `<p><strong>Date:</strong> ${e.timesubmitformatted}</p>`;
        html += `<p>${e.text}</p>`;

        if (e.img && e.img.length) {
            html += `<div class="detail-img-grid">`;
            e.img.forEach((i, idx) => {
                const patternIdx = idx % 5;
                let cls = 'small';
                if (patternIdx === 2) cls = 'big';
                html += `<div class="detail-img-item ${cls}"><img src="${i}" alt="${e.nameofreviewer}"></div>`;
            });
            html += `</div>`;
        }

        html += `</li>`;
    });

    html += `</ul>`;
    html += '</div>';
}

html += `
<div class="upload-review">
    <h2>Share your experience for this destination:</h2>
    <form id="reviewForm">
        <input type="hidden" id="reviewDestinationId" value="${destination.id}">
        <label for="reviewerName">Your Name:</label>
        <input type="text" id="reviewerName" name="reviewerName" required>

        <label for="reviewRate">Rating:</label>
        <select id="reviewRate" name="reviewRate" required>
            <option value="1">1 ⭐</option>
            <option value="2">2 ⭐</option>
            <option value="3">3 ⭐</option>
            <option value="4">4 ⭐</option>
            <option value="5">5 ⭐</option>
        </select>

        <label for="reviewText">Review:</label>
        <textarea id="reviewText" name="reviewText" rows="4" required></textarea>

        <label for="reviewImages">Upload Images (optional):</label>
        <input type="file" id="reviewImages" name="reviewImages" accept="image/*" multiple>

        <button type="submit">Submit</button>
    </form>
    <div id="reviewMessage" style="margin-top:10px;"></div>
</div>
`;

            detailsSection.innerHTML = html;
            detailsSection.style.display = 'block';
            setTimeout(() => detailsSection.classList.add('show'), 50);
            gridWrapper.style.display = 'none';
            backBtn.style.display = 'inline-block';
        }

        // Back button
        backBtn.addEventListener('click', () => {
            detailsSection.classList.remove('show');
            setTimeout(() => {
                detailsSection.style.display = 'none';
                detailsSection.innerHTML = '';
                gridWrapper.style.display = 'block';
                backBtn.style.display = 'none';
            }, 500);
        });

        // Discover buttons
        document.querySelectorAll('.discover-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.dataset.id;
                const destination = destinations.find(d => d.id == id);
                if (!destination) return;
                showDetails(destination);
            });
        });

        // Sorting function
        const typeSort = document.getElementById('typeSort');

function sortGridByType() {
    const selectedType = typeSort.value;
    const items = Array.from(grid.children);

    items.forEach(item => {
        const type = item.dataset.type; // make sure each grid-item has data-type
        if (selectedType === 'all' || type === selectedType) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
}

// Listen for dropdown change
typeSort.addEventListener('change', sortGridByType);
sortGridByType();
        function toggleExperience(header) {
    const list = header.nextElementSibling; // the <ul>
    if (list.style.display === 'none' || list.style.display === '') {
        list.style.display = 'block';
        header.textContent = 'Reviews: ⭐'; // change arrow
    } else {
        list.style.display = 'none';
        header.textContent = 'Reviews: ⭐';
    }
}
document.addEventListener('submit', function(e) {
    if (e.target && e.target.id === 'reviewForm') {
        e.preventDefault();

        const destinationId = document.getElementById('reviewDestinationId').value;
        const reviewerName = document.getElementById('reviewerName').value;
        const reviewRate = document.getElementById('reviewRate').value;
        const reviewText = document.getElementById('reviewText').value;
        const reviewImages = document.getElementById('reviewImages').files;

        const formData = new FormData();
        formData.append('name', reviewerName);
        formData.append('rate', reviewRate);
        formData.append('text', reviewText);

        for (let i = 0; i < reviewImages.length; i++) {
            formData.append('images', reviewImages[i]); // key must match multer.array("images")
        }

        fetch(`/destinations/destination/${destinationId}/review`, {
            method: 'POST',
            body: formData // DO NOT set Content-Type manually!
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                document.getElementById('reviewMessage').innerText = "Review submitted successfully!";
                e.target.reset();

                // Optional: update the destination reviews list immediately
                const destination = destinations.find(d => d.id == destinationId);
                if (destination) {
                    if (!destination.experiences) destination.experiences = [];
                    destination.experiences.unshift(data.review);
                    showDetails(destination);
                }
            } else {
                document.getElementById('reviewMessage').innerText = data.error || "Error submitting review.";
            }
        })
        .catch(err => {
            document.getElementById('reviewMessage').innerText = "Error submitting review.";
            console.error(err);
        });
    }
});
    </script>
</body>

</html>
